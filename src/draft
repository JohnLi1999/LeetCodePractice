private static int SIZE;
private static int[] queens;
private static int[] result = new int[1];
private static Set<Integer> column = new HashSet<>();
private static Set<Integer> diagonal = new HashSet<>();
private static Set<Integer> anti_diagonal = new HashSet<>();

public static int totalNQueens(int n) {
    SIZE = n;
    queens = new int[SIZE];

    backtrack(0, result);
    return result[0];
}

private static void backtrack(int row, int[] result) {
    if (row >= SIZE) {
        result[0]++;
    }

    for (int col = 0; col < SIZE; col++) {
        if (column.contains(col) || diagonal.contains(row - col) || anti_diagonal.contains(row + col) {
            continue;
        }

        queens[row] = col;
        column.add(col);
        diagonal.add(row - col);
        anti_diagonal.add(row + col);

        backtrack(row + 1, result);

        column.remove(col);
        diagonal.remove(row - col);
        anti_diagonal.remove(row + col);
    }
}